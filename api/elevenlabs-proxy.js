// –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è ElevenLabs API
// –û–±—Ö–æ–¥–∏—Ç CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è

export default async function handler(req, res) {
  console.log('üîç –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤—ã–∑–≤–∞–Ω:', req.method, req.url)
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, xi-api-key')
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight –∑–∞–ø—Ä–æ—Å—ã
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ CORS preflight –æ–±—Ä–∞–±–æ—Ç–∞–Ω')
    res.status(200).end()
    return
  }
  
  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    res.status(405).json({ error: 'Method not allowed' })
    return
  }
  
  try {
    const { voiceId, text, apiKey } = req.body
    
    console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { voiceId, textLength: text?.length, hasApiKey: !!apiKey })
    
    if (!voiceId || !text || !apiKey) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã')
      res.status(400).json({ error: 'Missing required parameters' })
      return
    }
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ ElevenLabs API
    console.log('üåê –ó–∞–ø—Ä–æ—Å –∫ ElevenLabs API...')
    const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
      method: 'POST',
      headers: {
        'Accept': 'audio/mpeg',
        'Content-Type': 'application/json',
        'xi-api-key': apiKey
      },
      body: JSON.stringify({
        text: text,
        model_id: 'eleven_multilingual_v2',
        voice_settings: {
          stability: 0.5,
          similarity_boost: 0.5,
          style: 0.0,
          use_speaker_boost: true
        }
      })
    })
    
    console.log('üì° ElevenLabs response status:', response.status)
    
    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå ElevenLabs API error:', response.status, errorText)
      throw new Error(`ElevenLabs API error: ${response.status} ${response.statusText}`)
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö...')
    const audioBuffer = await response.arrayBuffer()
    console.log('‚úÖ –ê—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Ä–∞–∑–º–µ—Ä:', audioBuffer.byteLength, '–±–∞–π—Ç')
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
    res.setHeader('Content-Type', 'audio/mpeg')
    res.setHeader('Content-Length', audioBuffer.byteLength)
    res.status(200).send(Buffer.from(audioBuffer))
    console.log('‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É')
    
  } catch (error) {
    console.error('Proxy error:', error)
    res.status(500).json({ error: error.message })
  }
}
