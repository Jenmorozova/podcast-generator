import React, { useState, useEffect } from 'react'
import { Mic, Play, Pause, Download, Settings, Volume2 } from 'lucide-react'
import WebApp from '@twa-dev/sdk'
import './App.css'

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–æ–≤
 */
function App() {
  const [script, setScript] = useState('')
  const [voices, setVoices] = useState([])
  const [selectedVoice, setSelectedVoice] = useState(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const [audioUrl, setAudioUrl] = useState(null)
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentAudio, setCurrentAudio] = useState(null)
  const [isListening, setIsListening] = useState(false)
  const [isInitialized, setIsInitialized] = useState(false)
  const [isRefreshingVoices, setIsRefreshingVoices] = useState(false)
  const [isTestingVoices, setIsTestingVoices] = useState(false)
  const [currentTestVoice, setCurrentTestVoice] = useState(null)
  const [russianVoicesCount, setRussianVoicesCount] = useState(0)
  
  // –í–Ω–µ—à–Ω–∏–µ –≥–æ–ª–æ—Å–∞
  const [externalVoices, setExternalVoices] = useState([])
  const [useExternalTTS, setUseExternalTTS] = useState(false) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞
  const [selectedExternalVoice, setSelectedExternalVoice] = useState(null)
  const [isLoadingExternalVoices, setIsLoadingExternalVoices] = useState(false)
  
  // API –∫–ª—é—á–∏
  const [yandexApiKey, setYandexApiKey] = useState('')
  const [showApiKeyInput, setShowApiKeyInput] = useState(false)
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–∞
  const [rate, setRate] = useState(1)
  const [pitch, setPitch] = useState(1)
  const [volume, setVolume] = useState(1)


  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
   */
  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
    WebApp.ready()
    
    // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
    WebApp.expand()
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    WebApp.setHeaderColor('#667eea')
    
    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫—Ä—ã—Ç—å"
    WebApp.enableClosingConfirmation()
    
    console.log('üì± Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', WebApp.initDataUnsafe?.user?.username || '–ê–Ω–æ–Ω–∏–º')
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –≤–Ω–µ—à–Ω–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏
    setTimeout(() => {
      console.log('‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π')
    }, 2000)
  }, [])

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤
   */
  const loadExternalVoices = () => {
    setIsLoadingExternalVoices(true)
    
    const externalVoicesList = [
      // ElevenLabs –≥–æ–ª–æ—Å–∞
      { id: 'elevenlabs-rachel', name: 'ElevenLabs –†–µ–π—á–µ–ª', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: '21m00Tcm4TlvDq8ikWAM' },
      { id: 'elevenlabs-drew', name: 'ElevenLabs –î—Ä—é', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: '29vD33N1CtxCmqQRPOHJ' },
      { id: 'elevenlabs-clyde', name: 'ElevenLabs –ö–ª–∞–π–¥', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: '2EiwWnXFnvU5JabPnv8n' },
      { id: 'elevenlabs-paul', name: 'ElevenLabs –ü–æ–ª', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: '5Q0t7uMcjvnagumLfvZi' },
      { id: 'elevenlabs-domi', name: 'ElevenLabs –î–æ–º–∏', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'AZnzlk1XvdvUeBnXmlld' },
      { id: 'elevenlabs-dave', name: 'ElevenLabs –î–µ–π–≤', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'CYw3kZ02Hs0563khs1Fj' },
      { id: 'elevenlabs-fin', name: 'ElevenLabs –§–∏–Ω–Ω', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'D38z5RcWu1voky8WS1ja' },
      { id: 'elevenlabs-sarah', name: 'ElevenLabs –°–∞—Ä–∞', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'EXAVITQu4vr4xnSDxMaL' },
      { id: 'elevenlabs-antoni', name: 'ElevenLabs –ê–Ω—Ç–æ–Ω–∏', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'ErXwobaYiN019PkySvjV' },
      { id: 'elevenlabs-thomas', name: 'ElevenLabs –¢–æ–º–∞—Å', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'GBv7mTt0atIp3Br8iCZE' },
      { id: 'elevenlabs-charlie', name: 'ElevenLabs –ß–∞—Ä–ª–∏', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'IKne3meq5aSn9XLyUdCD' },
      { id: 'elevenlabs-emily', name: 'ElevenLabs –≠–º–∏–ª–∏', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'LcfcDJNUP1GQjkznOkx1' },
      { id: 'elevenlabs-elli', name: 'ElevenLabs –≠–ª–ª–∏', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'MF3mGyEYCl7XYWbV9V6O' },
      { id: 'elevenlabs-callum', name: 'ElevenLabs –ö–∞–ª–ª—É–º', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'N2lVS1w4EtoT3dr4eOWO' },
      { id: 'elevenlabs-liam', name: 'ElevenLabs –õ–∏–∞–º', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'TX3LPaxmHKxFdv7VOQHJ' },
      { id: 'elevenlabs-charlotte', name: 'ElevenLabs –®–∞—Ä–ª–æ—Ç—Ç–∞', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'XB0fqtUnx1vHXZsaMqox' },
      { id: 'elevenlabs-alice', name: 'ElevenLabs –ê–ª–∏—Å–∞', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'Xb7hH8MSUJpSbSDYk0k2' },
      { id: 'elevenlabs-matilda', name: 'ElevenLabs –ú–∞—Ç–∏–ª—å–¥–∞', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'XrExE9yKIg1WjnnlVkGX' },
      { id: 'elevenlabs-james', name: 'ElevenLabs –î–∂–µ–π–º—Å', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'ZQe5CQoFyQ0LmMjyu4vO' },
      { id: 'elevenlabs-joseph', name: 'ElevenLabs –î–∂–æ–∑–µ—Ñ', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'Zlb1dXrM653N07WRdFW3' },
      { id: 'elevenlabs-jeremy', name: 'ElevenLabs –î–∂–µ—Ä–µ–º–∏', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'bVMeCyTHy58xNoL34h3p' },
      { id: 'elevenlabs-michael', name: 'ElevenLabs –ú–∞–π–∫–ª', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'flq6f7yk4E4fJM5XTYuZ' },
      { id: 'elevenlabs-ethan', name: 'ElevenLabs –ò—Ç–∞–Ω', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'g5CIjZEefAph4nQFvHAz' },
      { id: 'elevenlabs-gigi', name: 'ElevenLabs –î–∂–∏–¥–∂–∏', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'jBpfuIE2acCO8z3wKNLl' },
      { id: 'elevenlabs-freya', name: 'ElevenLabs –§—Ä–µ–π—è', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'jsCqWAovK2LkecY7zXl4' },
      { id: 'elevenlabs-grace', name: 'ElevenLabs –ì—Ä–µ–π—Å', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'oWAxZDx7w5VEj9dCyTzz' },
      { id: 'elevenlabs-daniel', name: 'ElevenLabs –î—ç–Ω–∏–µ–ª', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'onwK4e9ZLuTAKqWW03F9' },
      { id: 'elevenlabs-lily', name: 'ElevenLabs –õ–∏–ª–∏', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'pFZP5JQG7iQjIQuC4Bku' },
      { id: 'elevenlabs-serenah', name: 'ElevenLabs –°–µ—Ä–∞–Ω–∞', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'pMsXgVXv3BLzUgSkhoup' },
      { id: 'elevenlabs-adam', name: 'ElevenLabs –ê–¥–∞–º', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'pNInz6obpgDQGcFmaJgB' },
      { id: 'elevenlabs-nicole', name: 'ElevenLabs –ù–∏–∫–æ–ª—å', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 'piTKgcLEGmPE4e6mEKli' },
      { id: 'elevenlabs-jessie', name: 'ElevenLabs –î–∂–µ—Å—Å–∏', provider: 'ElevenLabs', gender: 'female', lang: 'ru', voiceId: 't0jbNlBVZ17f02VDIeMI' },
      { id: 'elevenlabs-ryan', name: 'ElevenLabs –†–∞–π–∞–Ω', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'wViXBPUzp2ZZixB1xQuM' },
      { id: 'elevenlabs-sam', name: 'ElevenLabs –°—ç–º', provider: 'ElevenLabs', gender: 'male', lang: 'ru', voiceId: 'yoZ06aMxZJJ28mfd3POQ' }
    ]
    
    setExternalVoices(externalVoicesList)
    setSelectedExternalVoice(externalVoicesList[0])
    setIsLoadingExternalVoices(false)
    
    console.log(`üåê –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤: ${externalVoicesList.length}`)
    console.log('üìã –í–Ω–µ—à–Ω–∏–µ –≥–æ–ª–æ—Å–∞:', externalVoicesList.map(v => `${v.name} (${v.provider})`))
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   */
  useEffect(() => {
    const loadVoices = () => {
      const availableVoices = window.speechSynthesis.getVoices()
      const russianVoices = availableVoices.filter(voice => voice.lang.startsWith('ru'))
      
      console.log(`üé§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤: ${russianVoices.length}`)
      console.log('üìã –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞:', russianVoices.map(v => `${v.name} (${v.lang})`))
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º "Google —Ä—É—Å—Å–∫–∏–π" –≥–æ–ª–æ—Å, –Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –µ–≥–æ –∫–∞–∫ "–ê–≥–∞—Ç–∞"
      if (russianVoices.length > 0) {
        // –ò—â–µ–º Google —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        const googleVoice = russianVoices.find(v => v.name.toLowerCase().includes('google')) || russianVoices[0]
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–º–µ–Ω–µ–º "–ê–≥–∞—Ç–∞", –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å
        const agataDisplay = {
          ...googleVoice,
          displayName: '–ê–≥–∞—Ç–∞',
          originalVoice: googleVoice
        }
        
        setVoices([agataDisplay])
        setRussianVoicesCount(1)
        setSelectedVoice(agataDisplay)
        console.log(`üá∑üá∫ –°–æ–∑–¥–∞–Ω –≥–æ–ª–æ—Å: –ê–≥–∞—Ç–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ ${googleVoice.name})`)
      } else {
        console.log('‚ö†Ô∏è –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!')
        setVoices([])
        setRussianVoicesCount(0)
      }
      
      setIsInitialized(true)
    }

    loadVoices()
    loadExternalVoices()
    
    // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç –≥–æ–ª–æ—Å–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    if (window.speechSynthesis.onvoiceschanged !== undefined) {
      window.speechSynthesis.onvoiceschanged = loadVoices
    }
  }, [])

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
   */
  const processTextForSpeech = (text) => {
    return text
      // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –Ω–∞ –¥–ª–∏–Ω–Ω—É—é –ø–∞—É–∑—É (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–æ–≤)
      .replace(/\.{3,}/g, '   ')
      // –ó–∞–º–µ–Ω—è–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –Ω–∞ –ø–∞—É–∑—É
      .replace(/!+/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –Ω–∞ –ø–∞—É–∑—É
      .replace(/\?+/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –ø–∞—É–∑—É
      .replace(/\.+/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É
      .replace(/,+/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –Ω–∞ –ø–∞—É–∑—É
      .replace(/:/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –Ω–∞ –ø–∞—É–∑—É
      .replace(/;/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º —Ç–∏—Ä–µ –Ω–∞ –ø–∞—É–∑—É
      .replace(/‚Äî/g, ' ')
      .replace(/-/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –ø–∞—É–∑—É
      .replace(/[""''¬´¬ª]/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º —Å–∫–æ–±–∫–∏ –Ω–∞ –ø–∞—É–∑—É
      .replace(/[()]/g, ' ')
      // –ó–∞–º–µ–Ω—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ –Ω–∞ –ø–∞—É–∑—É
      .replace(/[\[\]]/g, ' ')
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã
      .replace(/\s{2,}/g, ' ')
      .trim()
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–µ API (—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ)
   */
  const playExternalTTS = async (text, voice) => {
    console.log('üéØ playExternalTTS –≤—ã–∑–≤–∞–Ω–∞:', { text: text.substring(0, 30) + '...', voice })
    setIsListening(true)
    
    try {
      let audioUrl = ''
      
      if (voice.provider === 'ElevenLabs') {
        // ElevenLabs TTS API
        console.log('üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º ElevenLabs:', voice.name)
        
        const apiKey = 'sk_023813124d9f4c186725d0647662cda61762f277146e8cf3'
        const voiceId = voice.voiceId
        
        try {
          const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`, {
            method: 'POST',
            headers: {
              'Accept': 'audio/mpeg',
              'Content-Type': 'application/json',
              'xi-api-key': apiKey
            },
            body: JSON.stringify({
              text: processTextForSpeech(text),
              model_id: 'eleven_multilingual_v2',
              voice_settings: {
                stability: 0.5,
                similarity_boost: 0.5,
                style: 0.0,
                use_speaker_boost: true
              }
            })
          })
          
          if (!response.ok) {
            throw new Error(`ElevenLabs API error: ${response.status} ${response.statusText}`)
          }
          
          const audioBlob = await response.blob()
          const audioUrl = URL.createObjectURL(audioBlob)
          const audio = new Audio(audioUrl)
          
          audio.oncanplay = () => {
            console.log('‚úÖ ElevenLabs TTS –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')
            audio.play().catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
              setIsListening(false)
              alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ –æ—Ç ElevenLabs.')
            })
          }
          
          audio.onended = () => {
            setIsListening(false)
            console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            URL.revokeObjectURL(audioUrl)
          }
          
          audio.onerror = (error) => {
            setIsListening(false)
            console.error('‚ùå –û—à–∏–±–∫–∞ ElevenLabs TTS:', error)
            URL.revokeObjectURL(audioUrl)
            alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç ElevenLabs.')
          }
          
        } catch (error) {
          setIsListening(false)
          console.error('‚ùå –û—à–∏–±–∫–∞ ElevenLabs API:', error)
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ElevenLabs API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
        }
        
      } else if (voice.provider === 'System') {
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        console.log('üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å:', voice.name)
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å
        let systemVoice = null
        
        // –î–ª—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ–ª–æ—Å–∞ –∏–∑ speechSynthesis
        const allVoices = window.speechSynthesis.getVoices()
        console.log('üîç –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:', allVoices.length)
        console.log('üîç –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞:', allVoices.filter(v => v.lang && v.lang.startsWith('ru')).map(v => v.name))
        
        systemVoice = allVoices.find(v => v.lang && v.lang.startsWith('ru')) || allVoices[0]
        console.log('üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å:', systemVoice ? systemVoice.name : '–ù–ï –ù–ê–ô–î–ï–ù')
        
        if (systemVoice) {
          console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å:', systemVoice.name)
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å
          const processedText = processTextForSpeech(text)
          const utterance = new SpeechSynthesisUtterance(processedText)
          utterance.voice = systemVoice
          
          // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≥–æ–ª–æ—Å–∞
          if (voice.id === 'system-fast') {
            utterance.rate = Math.min(rate * 1.3, 2.0) // –ë—ã—Å—Ç—Ä–µ–µ
            utterance.pitch = Math.min(pitch * 1.1, 2.0) // –í—ã—à–µ
          } else if (voice.id === 'system-slow') {
            utterance.rate = Math.max(rate * 0.7, 0.3) // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ
            utterance.pitch = Math.max(pitch * 0.9, 0.5) // –ù–∏–∂–µ
          } else if (voice.id === 'system-soft') {
            utterance.rate = rate * 0.9 // –ú—è–≥—á–µ
            utterance.pitch = Math.min(pitch * 1.2, 2.0) // –í—ã—à–µ
          } else if (voice.id === 'system-deep') {
            utterance.rate = rate * 0.8 // –ì–ª—É–±–∂–µ
            utterance.pitch = Math.max(pitch * 0.8, 0.5) // –ù–∏–∂–µ
          } else {
            utterance.rate = rate
            utterance.pitch = pitch
          }
          
          utterance.volume = volume / 100
          utterance.lang = 'ru-RU'
          
          utterance.onstart = () => {
            console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å (—Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å)')
          }
          
          utterance.onend = () => {
            setIsListening(false)
            console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
          }
          
          utterance.onerror = (event) => {
            if (event.error === 'interrupted') {
              console.log('‚ÑπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)')
              return
            }
            setIsListening(false)
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', event.error)
            alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å.')
          }
          
          // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
          speechSynthesis.cancel()
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
          setTimeout(() => {
            speechSynthesis.speak(utterance)
          }, 100)
          
        } else {
          setIsListening(false)
          alert('–°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.')
        }
        
      } else if (voice.provider === 'Yandex') {
        // –Ø–Ω–¥–µ–∫—Å SpeechKit API
        if (!yandexApiKey) {
          setIsListening(false)
          setShowApiKeyInput(true)
          alert('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤ –Ø–Ω–¥–µ–∫—Å–∞ –Ω—É–∂–µ–Ω API –∫–ª—é—á. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ.')
          return
        }
        
        const voiceName = voice.id.split('-')[1]
        const speed = Math.max(0.1, Math.min(3, rate))
        
        try {
          const response = await fetch('https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize', {
            method: 'POST',
            headers: {
              'Authorization': `Api-Key ${yandexApiKey}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              text: text,
              lang: 'ru-RU',
              voice: voiceName,
              speed: speed,
              format: 'mp3'
            })
          })
          
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`)
          }
          
          const audioBlob = await response.blob()
          const audioUrl = URL.createObjectURL(audioBlob)
          const audio = new Audio(audioUrl)
          
          audio.oncanplay = () => {
            console.log('‚úÖ –Ø–Ω–¥–µ–∫—Å TTS –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')
            audio.play()
          }
          
          audio.onended = () => {
            setIsListening(false)
            console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            URL.revokeObjectURL(audioUrl)
          }
          
          audio.onerror = (error) => {
            setIsListening(false)
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å TTS:', error)
            URL.revokeObjectURL(audioUrl)
            alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –æ—Ç –Ø–Ω–¥–µ–∫—Å–∞.')
          }
          
        } catch (error) {
          setIsListening(false)
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –Ø–Ω–¥–µ–∫—Å API:', error)
          alert(`–û—à–∏–±–∫–∞ API –Ø–Ω–¥–µ–∫—Å–∞: ${error.message}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞.`)
        }
        
      } else {
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        setIsListening(false)
        alert(`–ì–æ–ª–æ—Å "${voice.name}" —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π.\n\n–ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤—Å–µ–≥–¥–∞)\n‚Ä¢ Google Translate (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)\n‚Ä¢ –Ø–Ω–¥–µ–∫—Å (—Å API –∫–ª—é—á–æ–º)`)
      }
      
    } catch (error) {
      setIsListening(false)
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ TTS:', error)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å.')
    }
  }

  /**
   * –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Web Speech API –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
   */
  const listenToText = () => {
    if (!script.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!')
      return
    }

    if (!isInitialized) {
      alert('–ì–æ–ª–æ—Å–∞ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
      return
    }

    console.log('üîç –û—Ç–ª–∞–¥–∫–∞:', {
      useExternalTTS,
      selectedExternalVoice,
      script: script.substring(0, 50) + '...'
    })

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤–Ω–µ—à–Ω–∏–π TTS
    if (useExternalTTS && selectedExternalVoice) {
      console.log('üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π TTS:', selectedExternalVoice.name)
      playExternalTTS(script, selectedExternalVoice)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
    if (!window.speechSynthesis) {
      alert('–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
      return
    }

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    window.speechSynthesis.cancel()
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setIsListening(false)
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    setTimeout(() => {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π utterance
      const processedScript = processTextForSpeech(script)
      const utterance = new SpeechSynthesisUtterance(processedScript)
      
      if (selectedVoice) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≥–æ–ª–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å–∞–º –≥–æ–ª–æ—Å
        utterance.voice = selectedVoice.originalVoice || selectedVoice
      }
      
      utterance.rate = rate
      utterance.pitch = pitch
      utterance.volume = volume
      utterance.lang = 'ru-RU'

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –î–û –∑–∞–ø—É—Å–∫–∞
      utterance.onstart = () => {
        setIsListening(true)
        console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å')
      }
      
      utterance.onend = () => {
        setIsListening(false)
        console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
      }
      
      utterance.onerror = (event) => {
        setIsListening(false)
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É interrupted - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        if (event.error === 'interrupted') {
          console.log('‚ÑπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)')
          return
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', event.error)
        
        let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏'
        switch(event.error) {
          case 'not-allowed':
            errorMessage = '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            break
          case 'audio-busy':
            errorMessage = '–ê—É–¥–∏–æ –∑–∞–Ω—è—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            break
          case 'audio-hardware':
            errorMessage = '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É–¥–∏–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.'
            break
          case 'network':
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏.'
            break
          case 'synthesis-unavailable':
            errorMessage = '–°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.'
            break
          case 'synthesis-failed':
            errorMessage = '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏.'
            break
          case 'language-unavailable':
            errorMessage = '–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
            break
          case 'voice-unavailable':
            errorMessage = '–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
            break
          case 'text-too-long':
            errorMessage = '–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å.'
            break
          case 'invalid-argument':
            errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–æ–ª–æ—Å–∞.'
            break
          default:
            errorMessage = `–û—à–∏–±–∫–∞: ${event.error}`
        }
        
        alert(errorMessage)
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
      try {
        window.speechSynthesis.speak(utterance)
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏:', error)
        setIsListening(false)
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      }
    }, 500) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  const stopListening = () => {
    window.speechSynthesis.cancel()
    setIsListening(false)
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤
   */
  const refreshVoices = () => {
    setIsRefreshingVoices(true)
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–∞
    const loadVoices = () => {
      const availableVoices = window.speechSynthesis.getVoices()
      const russianVoices = availableVoices.filter(voice => voice.lang.startsWith('ru'))
      
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤: ${availableVoices.length}`)
      console.log(`üá∑üá∫ –†—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤: ${russianVoices.length}`)
      console.log('üìã –ù–æ–≤—ã–µ –≥–æ–ª–æ—Å–∞:', availableVoices.map(v => `${v.name} (${v.lang})`))
      
      setVoices(availableVoices)
      setRussianVoicesCount(russianVoices.length)
      
      // –í—ã–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
      const russianVoice = russianVoices.find(voice => voice.lang.startsWith('ru'))
      if (russianVoice) {
        setSelectedVoice(russianVoice)
        console.log(`üá∑üá∫ –í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: ${russianVoice.name}`)
      } else if (availableVoices.length > 0) {
        setSelectedVoice(availableVoices[0])
        console.log(`üåç –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${availableVoices[0].name}`)
      }
      
      setIsRefreshingVoices(false)
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (russianVoices.length > 0) {
        alert(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ! –ù–∞–π–¥–µ–Ω–æ ${russianVoices.length} —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤: ${russianVoices.map(v => v.name).join(', ')}`)
      } else {
        alert('‚ö†Ô∏è –†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –Ω–∏–∂–µ –¥–ª—è –∏—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∏.')
      }
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    setTimeout(loadVoices, 500)
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤
   */
  const testRussianVoices = async () => {
    const russianVoices = voices.filter(voice => voice.lang.startsWith('ru'))
    
    if (russianVoices.length === 0) {
      alert('–†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µ.')
      return
    }

    setIsTestingVoices(true)
    console.log(`üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${russianVoices.length} —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤`)

    for (let i = 0; i < russianVoices.length; i++) {
      const voice = russianVoices[i]
      setCurrentTestVoice(voice)
      
      console.log(`üé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å ${i + 1}/${russianVoices.length}: ${voice.name}`)
      
      // –°–æ–∑–¥–∞–µ–º utterance –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const testText = processTextForSpeech('–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç —Ä—É—Å—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞.')
      const utterance = new SpeechSynthesisUtterance(testText)
      utterance.voice = voice
      utterance.rate = 1
      utterance.pitch = 1
      utterance.volume = 0.8

      // –û–±–µ—â–∞–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      await new Promise((resolve) => {
        utterance.onend = () => {
          console.log(`‚úÖ –ì–æ–ª–æ—Å ${voice.name} —Ä–∞–±–æ—Ç–∞–µ—Ç`)
          resolve()
        }
        
        utterance.onerror = (event) => {
          if (event.error === 'interrupted') {
            console.log(`‚ÑπÔ∏è –ì–æ–ª–æ—Å ${voice.name} –ø—Ä–µ—Ä–≤–∞–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)`)
          } else {
            console.log(`‚ùå –ì–æ–ª–æ—Å ${voice.name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${event.error}`)
          }
          resolve()
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
        window.speechSynthesis.speak(utterance)
      })

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000))
    }

    setCurrentTestVoice(null)
    setIsTestingVoices(false)
    console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    alert(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12) –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.`)
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  const generatePodcast = async () => {
    if (!script.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–∞!')
      return
    }

    setIsGenerating(true)
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      if (currentAudio) {
        currentAudio.pause()
        setCurrentAudio(null)
      }
      
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π URL
      if (audioUrl) {
        URL.revokeObjectURL(audioUrl)
        setAudioUrl(null)
      }
      
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π TTS, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º MP3 —á–µ—Ä–µ–∑ API
      if (useExternalTTS && selectedExternalVoice && selectedExternalVoice.provider === 'ElevenLabs') {
        console.log('üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º MP3 —á–µ—Ä–µ–∑ ElevenLabs...')
        
        try {
          const apiKey = 'sk_023813124d9f4c186725d0647662cda61762f277146e8cf3'
          const voiceId = selectedExternalVoice.voiceId
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ö–æ–¥–∞ CORS
          const response = await fetch('/api/elevenlabs-proxy', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              voiceId: voiceId,
              text: processTextForSpeech(script),
              apiKey: apiKey
            })
          })
          
          if (!response.ok) {
            throw new Error(`ElevenLabs API error: ${response.status} ${response.statusText}`)
          }
          
          const audioBlob = await response.blob()
          const audioUrl = URL.createObjectURL(audioBlob)
          
          // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è MP3
          const downloadLink = document.createElement('a')
          downloadLink.href = audioUrl
          downloadLink.download = `podcast-${new Date().toISOString().split('T')[0]}.mp3`
          document.body.appendChild(downloadLink)
          downloadLink.click()
          document.body.removeChild(downloadLink)
          
          // –û—á–∏—â–∞–µ–º URL
          setTimeout(() => {
            URL.revokeObjectURL(audioUrl)
          }, 1000)
          
          console.log('‚úÖ MP3 —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ')
          setIsGenerating(false)
          return
          
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ ElevenLabs API:', error)
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
          const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
          const isCorsError = errorMessage.includes('CORS') || errorMessage.includes('cors') || errorMessage.includes('Cross-Origin')
          
          const instructions = `üéôÔ∏è ELEVENLABS API –ù–ï –î–û–°–¢–£–ü–ï–ù

‚ùå –û—à–∏–±–∫–∞: ${errorMessage}

${isCorsError ? 'üîí CORS –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞:' : 'üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç—å—é:'}
${isCorsError ? '‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ ElevenLabs' : '‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ API'}
‚Ä¢ –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤/—É—Å—Ç—Ä–æ–π—Å—Ç–≤

üí° –†–ï–®–ï–ù–ò–Ø:

1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å "–ê–≥–∞—Ç–∞" (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
2Ô∏è‚É£ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ "–°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
3Ô∏è‚É£ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä (Chrome –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª—É—á—à–µ)

üìù –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ –ì–æ–ª–æ—Å: ${selectedExternalVoice.name}
‚Ä¢ –¢–µ–∫—Å—Ç: ${script.substring(0, 50)}...`

          alert(instructions)
          
          // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞
          const switchToSystem = confirm('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å "–ê–≥–∞—Ç–∞"?')
          
          if (switchToSystem) {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞
            setUseExternalTTS(false)
            alert('‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å "–ê–≥–∞—Ç–∞". –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "–°–∫–∞—á–∞—Ç—å MP3" —Å–Ω–æ–≤–∞.')
          }
          
          // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å –∫–∞–∫ fallback
          const processedScript = processTextForSpeech(script)
          const utterance = new SpeechSynthesisUtterance(processedScript)
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –≥–æ–ª–æ—Å
          const allVoices = window.speechSynthesis.getVoices()
          const systemVoice = allVoices.find(v => v.lang && v.lang.startsWith('ru')) || allVoices[0]
          
          if (systemVoice) {
            utterance.voice = systemVoice
            utterance.rate = rate
            utterance.pitch = pitch
            utterance.volume = volume
            utterance.lang = 'ru-RU'
            
            window.speechSynthesis.speak(utterance)
          }
          
          setIsGenerating(false)
          return
        }
      }
      
      // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º Google Translate TTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
      console.log('üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Google Translate TTS...')
      
      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Translate TTS –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
        const encodedText = encodeURIComponent(processTextForSpeech(script))
        const googleTtsUrl = `https://translate.google.com/translate_tts?ie=UTF-8&tl=ru&client=tw-ob&q=${encodedText}`
        
        console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –æ—Ç Google Translate...')
        
        const response = await fetch(googleTtsUrl, {
          method: 'GET',
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
          }
        })
        
        if (!response.ok) {
          throw new Error(`Google TTS error: ${response.status} ${response.statusText}`)
        }
        
        const audioBlob = await response.blob()
        const audioUrl = URL.createObjectURL(audioBlob)
        
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
        const downloadLink = document.createElement('a')
        downloadLink.href = audioUrl
        downloadLink.download = `podcast-${new Date().toISOString().split('T')[0]}.mp3`
        document.body.appendChild(downloadLink)
        downloadLink.click()
        document.body.removeChild(downloadLink)
        
        // –û—á–∏—â–∞–µ–º URL
        setTimeout(() => {
          URL.revokeObjectURL(audioUrl)
        }, 1000)
        
        console.log('‚úÖ –ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Google TTS')
        
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Google TTS:', error)
        
        // Fallback: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        const instructions = `üéôÔ∏è –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ü–ò–°–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é:

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å" –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
2Ô∏è‚É£ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞/–∞—É–¥–∏–æ:
   ‚Ä¢ macOS: Cmd+Shift+5 ‚Üí "–ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å—å —ç–∫—Ä–∞–Ω"
   ‚Ä¢ Windows: Win+G ‚Üí "–ó–∞–ø–∏—Å–∞—Ç—å" 
   ‚Ä¢ Chrome: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ "Screen Recorder"

3Ô∏è‚É£ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
4Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP3/WAV

üìù –ù–ê–°–¢–†–û–ô–ö–ò:
‚Ä¢ –ì–æ–ª–æ—Å: ${selectedVoice?.name || 'Default'}
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: ${rate}x
‚Ä¢ –í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞: ${pitch}
‚Ä¢ –ì—Ä–æ–º–∫–æ—Å—Ç—å: ${Math.round(volume * 100)}%`

        alert(instructions)
        
        // –°–æ–∑–¥–∞–µ–º utterance –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
        const processedScript = processTextForSpeech(script)
        const utterance = new SpeechSynthesisUtterance(processedScript)
        
        if (selectedVoice) {
          utterance.voice = selectedVoice.originalVoice || selectedVoice
        }
        
        utterance.rate = rate
        utterance.pitch = pitch
        utterance.volume = volume
        utterance.lang = 'ru-RU'

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞
        const synthesisPromise = new Promise((resolve, reject) => {
          utterance.onstart = () => {
            console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏...')
          }
          
          utterance.onend = () => {
            console.log('‚úÖ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
            resolve()
          }
          
          utterance.onerror = (event) => {
            console.error('Speech synthesis error:', event.error)
            reject(new Error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: ' + event.error))
          }
        })

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏
        window.speechSynthesis.speak(utterance)
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–Ω—Ç–µ–∑–∞
        await synthesisPromise
      }
      
      setIsGenerating(false)
      
    } catch (error) {
      console.error('Error generating podcast:', error)
      setIsGenerating(false)
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–∞: ' + error.message)
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ/–ø–∞—É–∑–∞ –∞—É–¥–∏–æ
   */
  const togglePlayback = () => {
    if (!audioUrl) return

    if (isPlaying && currentAudio) {
      currentAudio.pause()
      setIsPlaying(false)
    } else if (currentAudio) {
      currentAudio.play()
      setIsPlaying(true)
    } else {
      const audio = new Audio(audioUrl)
      audio.onended = () => setIsPlaying(false)
      audio.play()
      setCurrentAudio(audio)
      setIsPlaying(true)
    }
  }

  /**
   * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
   */
  const downloadPodcast = () => {
    if (!audioUrl) return

    const a = document.createElement('a')
    a.href = audioUrl
    a.download = `podcast-${Date.now()}.webm`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ —è–∑—ã–∫–∞–º –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  const groupedVoices = voices.reduce((acc, voice) => {
    const lang = voice.lang
    if (!acc[lang]) {
      acc[lang] = []
    }
    acc[lang].push(voice)
    return acc
  }, {})

  return (
    <div className="app">
      <header className="header">
        <div className="header-content">
          <Mic className="logo-icon" size={40} />
          <h1>–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–∞—Å—Ç–æ–≤</h1>
          <p className="subtitle">–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ –ø–æ–¥–∫–∞—Å—Ç</p>
        </div>
      </header>

      <div className="container">
        <div className="editor-section">
          <div className="section-header">
            <h2>–¢–µ–∫—Å—Ç –ø–æ–¥–∫–∞—Å—Ç–∞</h2>
            <span className="char-count">{script.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
          </div>
          
          <textarea
            className="script-editor"
            value={script}
            onChange={(e) => setScript(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–¥–∫–∞—Å—Ç–∞...&#10;&#10;–ù–∞–ø—Ä–∏–º–µ—Ä:&#10;–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –ø–æ–¥–∫–∞—Å—Ç! –°–µ–≥–æ–¥–Ω—è –º—ã –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–∏ –Ω–∞ –Ω–∞—à—É –∂–∏–∑–Ω—å..."
            rows={12}
          />
        </div>

        <div className="settings-section">
          <div className="section-header">
            <Settings size={20} />
            <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞</h2>
          </div>

          <div className="settings-grid">
            <div className="setting-item">
              <div className="voice-selector">
                <label htmlFor="voice-select">–í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞</label>
                
                {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –∏ –≤–Ω–µ—à–Ω–∏–º–∏ –≥–æ–ª–æ—Å–∞–º–∏ */}
                <div className="voice-mode-toggle">
                  <button
                    className={`btn btn-small ${!useExternalTTS ? 'btn-active' : 'btn-inactive'}`}
                    onClick={() => setUseExternalTTS(false)}
                    title="–°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–µ)"
                  >
                    üè† –°–∏—Å—Ç–µ–º–Ω—ã–µ
                  </button>
                  <button
                    className={`btn btn-small ${useExternalTTS ? 'btn-active' : 'btn-inactive'}`}
                    onClick={() => setUseExternalTTS(true)}
                    title="–í–Ω–µ—à–Ω–∏–µ –≥–æ–ª–æ—Å–∞ (–æ–Ω–ª–∞–π–Ω)"
                  >
                    üåê –í–Ω–µ—à–Ω–∏–µ
                  </button>
                </div>

                <div className="voice-controls">
                  {!useExternalTTS ? (
                    // –°–∏—Å—Ç–µ–º–Ω—ã–µ –≥–æ–ª–æ—Å–∞
                    <>
                      <select
                        id="voice-select"
                        value={selectedVoice?.name || ''}
                        onChange={(e) => {
                          const voice = voices.find(v => v.name === e.target.value)
                          setSelectedVoice(voice)
                        }}
                        className="select-input"
                      >
                        {Object.entries(groupedVoices).map(([lang, voiceList]) => (
                          <optgroup key={lang} label={`${lang} (${voiceList.length} –≥–æ–ª–æ—Å–æ–≤)`}>
                            {voiceList.map((voice) => (
                              <option key={voice.name} value={voice.name}>
                                {voice.displayName || voice.name} {voice.lang && voice.lang.startsWith('ru') ? 'üá∑üá∫' : voice.lang && voice.lang.startsWith('en') ? 'üá∫üá∏' : 'üåç'}
                              </option>
                            ))}
                          </optgroup>
                        ))}
                      </select>
                    </>
                  ) : (
                    // –í–Ω–µ—à–Ω–∏–µ –≥–æ–ª–æ—Å–∞
                    <>
                      <select
                        id="external-voice-select"
                        value={selectedExternalVoice?.id || ''}
                        onChange={(e) => {
                          const voice = externalVoices.find(v => v.id === e.target.value)
                          setSelectedExternalVoice(voice)
                        }}
                        className="select-input"
                      >
                        <optgroup label="üåê –í–Ω–µ—à–Ω–∏–µ —Ä—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞">
                          {externalVoices.map((voice) => (
                            <option key={voice.id} value={voice.id}>
                              {voice.name} ({voice.provider}) {voice.gender === 'female' ? 'üë©' : 'üë®'}
                            </option>
                          ))}
                        </optgroup>
                      </select>
            <button
              className="btn btn-small btn-info"
              onClick={() => alert('33 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥–æ–ª–æ—Å–∞ ElevenLabs!\n\nüé§ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: –°—Ç—É–¥–∏–π–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ\nüåç –ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\nüë• –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ: 33 —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–∞\n‚ö° –ë—ã—Å—Ç—Ä–æ: –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è\n\n‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä!\n–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å"!')}
              title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–∞—Ö"
            >
              ‚ÑπÔ∏è
            </button>
                    </>
                  )}
                </div>
                
              </div>
            </div>

            <div className="setting-item">
              <label htmlFor="rate-slider">
                –°–∫–æ—Ä–æ—Å—Ç—å: {rate.toFixed(1)}x
              </label>
              <input
                id="rate-slider"
                type="range"
                min="0.5"
                max="2"
                step="0.1"
                value={rate}
                onChange={(e) => setRate(parseFloat(e.target.value))}
                className="slider"
              />
            </div>

            <div className="setting-item">
              <label htmlFor="pitch-slider">
                –í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞: {pitch.toFixed(1)}
              </label>
              <input
                id="pitch-slider"
                type="range"
                min="0.5"
                max="2"
                step="0.1"
                value={pitch}
                onChange={(e) => setPitch(parseFloat(e.target.value))}
                className="slider"
              />
            </div>

            <div className="setting-item">
              <label htmlFor="volume-slider">
                <Volume2 size={16} /> –ì—Ä–æ–º–∫–æ—Å—Ç—å: {Math.round(volume * 100)}%
              </label>
              <input
                id="volume-slider"
                type="range"
                min="0"
                max="1"
                step="0.1"
                value={volume}
                onChange={(e) => setVolume(parseFloat(e.target.value))}
                className="slider"
              />
            </div>
          </div>
        </div>

        <div className="actions-section">
          <div className="primary-actions">
            <button
              className="btn btn-primary"
              onClick={isListening ? stopListening : listenToText}
              disabled={!script.trim() || !isInitialized}
            >
              {isListening ? <Pause size={20} /> : <Play size={20} />}
              {!isInitialized ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : isListening ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ü—Ä–æ—Å–ª—É—à–∞—Ç—å'}
            </button>

            <button
              className="btn btn-success"
              onClick={generatePodcast}
              disabled={isGenerating || !script.trim()}
            >
              <Download size={20} />
              {isGenerating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–∫–∞—á–∞—Ç—å MP3'}
            </button>
          </div>


          <div className="info-text">
            <p>üí° <strong>–°–æ–≤–µ—Ç:</strong> –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ—Å–ª—É—à–∞—Ç—å" —á—Ç–æ–±—ã —É—Å–ª—ã—à–∞—Ç—å, –∫–∞–∫ –∑–≤—É—á–∏—Ç –≤–∞—à —Ç–µ–∫—Å—Ç, –∑–∞—Ç–µ–º "–°–∫–∞—á–∞—Ç—å MP3" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞.</p>
          </div>

        </div>
      </div>

      <footer className="footer">
        <p>Tg:@Jen_Zhuravishkina</p>
      </footer>
    </div>
  )
}

export default App

